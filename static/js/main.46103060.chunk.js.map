{"version":3,"sources":["logo.svg","components/howtoplaymodal/howtoplaymodal.js","components/navbar/navbar.js","components/footer/footer.js","components/scoreboard/scoreboard.js","components/ridesCard/ridesCard.js","components/ridesGame/ridesGame.js","AboutRides.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HowToPlayModal","id","className","to","Navbar","src","logo","alt","data-target","style","color","href","Footer","target","Scoreboard","props","score","topScore","rideCard","name","image","handleClicked","key","data-id","backgroundImage","onClick","title","RidesGame","state","rides","ridesClicked","message","event","attributes","getNamedItem","value","shuffleRides","checkClick","updateTopScore","setState","shuffleRidesArray","a","x","y","i","length","Math","floor","random","newState","cb","youWin","toast","html","displayLength","ride","includes","console","log","push","this","map","clear","Component","AboutRides","disney_wiki_link","location","date_opened","date_closed","App","basename","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46103060.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.72d80214.svg\";","import React from \"react\";\r\nimport \"./howtoplaymodal.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction HowToPlayModal() {\r\n  return (\r\n    <div id=\"how-to-play\" className=\"modal bottom-sheet\">\r\n      <div className=\"modal-content\">\r\n        <h4>\r\n          <b>DefunctDisney</b>\r\n        </h4>\r\n        <h6>HOW TO PLAY</h6>\r\n        <hr />\r\n        <p className=\"left-align how-to-text\">\r\n          DefunctDisney is a memory game, featuring photos from Walt Disney World's past. To start\r\n          the game, click on any of the 12 photos shown, but remember which one you've clicked! The\r\n          goal is for you to click on each photo only once, until you've clicked them all. If you\r\n          click on a photo you've already chosen, the game will end. Test your memory and walk down\r\n          memory lane with these defunct Disney rides and attractions.\r\n        </p>\r\n      </div>\r\n      <div className=\"modal-footer\">\r\n        <Link to=\"#\" className=\"modal-close waves-effect orange darken-3 btn align-center\">\r\n          Got It!\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HowToPlayModal;\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport HowToPlayModal from \"../howtoplaymodal\";\r\nimport logo from '../../logo.svg'\r\nimport './navbar.css'\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <div className=\"navbar-fixed\">\r\n          <HowToPlayModal />\r\n      <nav>\r\n      <div className=\"nav-wrapper white nav-text\">    \r\n        <Link to=\"/\"><img src={logo} className=\"brand-logo right App-logo heartbeat\" alt=\"retro mickey ears\" /></Link>\r\n        <Link to=\"/\" data-target=\"mobile-nav\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></Link>\r\n\r\n          <ul id=\"nav-mobile\" className=\"left hide-on-med-and-down\">              \r\n            <li><Link to=\"/\" className=\"col s4\" style={{color: \"#3c334a\"}}><h3><b>DefunctDisney</b></h3></Link></li>\r\n            <li><div id=\"tagline\">A memory game featuring defunct Walt Disney World rides.</div></li>\r\n            <li><Link to=\"/\" className=\"navpadding waves-effect waves-light\">Home</Link></li>\r\n            <li><a className=\"navpadding waves-effect waves-light modal-trigger\" href=\"#how-to-play\">How to Play</a></li>\r\n            <li><a className=\"navpadding waves-effect waves-light\" href=\"#/AboutRides\">About the Rides</a></li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n\r\n\r\n    <ul className=\"sidenav\" id=\"mobile-nav\">\r\n    <li><Link to=\"/\" style={{color: \"#3c334a\"}}><h4><b>DefunctDisney</b></h4></Link></li>\r\n        <li><div id=\"tagline-mobile\">A memory game featuring defunct Walt Disney World rides.</div></li>\r\n        <li><Link to=\"/\" className=\"waves-effect waves-light\">Home</Link></li>\r\n        <li><a className=\"waves-effect waves-light modal-trigger\" href=\"#how-to-play\">How to Play</a></li>\r\n        <li><Link to=\"#/AboutRides\" className=\"waves-effect waves-light\">About the Rides</Link></li>\r\n  </ul>\r\n    </div>  \r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport './footer.css'\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className=\"page-footer footercr\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n          </div>\r\n        \r\n        <div className=\"footer-copyright footercr\">\r\n          <div className=\"container text-white\">\r\n          Â© 2020 Bessy G. Martinez\r\n          <a className=\"right githubicon\" href=\"https://github.com/bessygmartinez/DefunctDisney\" target=\"_new\">\r\n              <i className=\"fab fa-github\"></i>\r\n              </a>\r\n          </div>\r\n        </div></div>\r\n      </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './scoreboard.css'\r\n\r\nfunction Scoreboard(props) {\r\n    return (\r\n        <div className=\"row\">\r\n        <div className=\"col s6 offset-s3\">\r\n          <div className=\"card\"> \r\n            <div className=\"card-content center\">\r\n              <div className=\"row\">\r\n              <div className=\"col s12 m6\"><b>Score: {props.score}</b></div>\r\n              <div className=\"col s12 m6\"><b>Top Score: {props.topScore}</b></div>\r\n              </div>\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Scoreboard;","import React from 'react';\r\nimport './ridesCard.css';\r\n\r\nconst rideCard = ({ id, name, image, handleClicked }) => (\r\n        <div className=\"col l2 m4 s12 center\">\r\n        <div\r\n            className=\"card\"\r\n            key={id}\r\n            data-id={id}\r\n            name={name}\r\n            style={{ backgroundImage: `url(${image})` }}\r\n            onClick={handleClicked}\r\n            alt={name}\r\n            title={name}\r\n        >\r\n        </div>\r\n        </div>\r\n)\r\n\r\nexport default rideCard;","import React, { Component } from \"react\";\r\nimport rides from \"../../rides.json\";\r\nimport Scoreboard from \"../scoreboard\";\r\nimport RidesCard from '../ridesCard';\r\nimport { toast } from \"materialize-css\";\r\n\r\nclass RidesGame extends Component {\r\n    state = {\r\n      rides: rides,\r\n      ridesClicked: [],\r\n      topScore: 0,\r\n      message: \"\"\r\n    };\r\n  \r\n    handleClicked = event => {\r\n      const name = event.target.attributes.getNamedItem(\"name\").value;\r\n      this.shuffleRides();\r\n      this.checkClick(name, this.updateTopScore);\r\n    };\r\n  \r\n    shuffleRides = (rides) => {\r\n      this.setState(rides = this.shuffleRidesArray(this.state.rides));\r\n    };\r\n  \r\n    shuffleRidesArray = (a) => {\r\n      let x, y, i;\r\n      for (i = a.length - 1; i > 0; i--) {\r\n        x = Math.floor(Math.random() * (i + 1));\r\n        y = a[i];\r\n        a[i] = a[x];\r\n        a[x] = y;\r\n      }\r\n      return a;\r\n    };\r\n  \r\n    updateTopScore = (newState, cb) => {\r\n      if (newState.ridesClicked.length > newState.topScore) {\r\n        newState.topScore++;\r\n        this.setState(newState);\r\n      }\r\n      cb(newState);\r\n    };\r\n  \r\n    youWin = newState => {\r\n      if (newState.ridesClicked.length === 12) {\r\n        newState.message = `Congrats! You remembered them all! You Win!`;\r\n        toast({html:`${newState.message}`, displayLength: 3000})\r\n        newState.ridesClicked = [];\r\n        this.setState(newState);\r\n      }\r\n    };\r\n  \r\n    checkClick = (ride, cb) => {\r\n      const newState = { ...this.state };\r\n      if (newState.ridesClicked.includes(ride)) {\r\n        newState.message = `Game Over! You already clicked on ${ride}!`;\r\n        console.log(newState.message)\r\n        toast({html: `${newState.message}`, displayLength: 2000})\r\n        newState.ridesClicked = [];\r\n        this.setState(newState);\r\n      } else {\r\n        newState.ridesClicked.push(ride);\r\n        newState.message = `Nice!`;\r\n        this.setState(newState);\r\n      }\r\n      cb(newState, this.youWin);\r\n    };\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <header>\r\n            <Scoreboard\r\n            score={this.state.ridesClicked.length} \r\n            topScore={this.state.topScore}\r\n            />\r\n          </header>\r\n  \r\n          <main>\r\n            <div className=\"row\">\r\n            <div className=\"col l12 m12 s6 offset-s2\">\r\n            <div className=\"ridesDiv\">\r\n            {this.state.rides.map(ride => (\r\n            <RidesCard\r\n              id={ride.id}\r\n              key={ride.id}\r\n              name={ride.name}\r\n              image={ride.image}\r\n              handleClicked={this.handleClicked}\r\n            />\r\n            ))}\r\n          <br style={{clear: \"both\"}} />\r\n          </div>\r\n          </div>\r\n          </div>\r\n          </main>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default RidesGame;\r\n  ","import React from \"react\";\r\nimport rides from \"./rides.json\";\r\nimport \"./AboutRides.css\";\r\n\r\nfunction AboutRides() {\r\n  return (\r\n      <main>\r\n          <div className=\"rides-container\">\r\n            <div className=\"container\">\r\n            {rides.map(ride => (\r\n          <div className=\"row card-row\" key={ride.id}>      \r\n          <div className=\"col s12 m7 l12\">\r\n            <div className=\"card about-card\">\r\n              <div className=\"card-image\"><a href={ride.disney_wiki_link} target=\"_new\"><img\r\n                  src={ride.image}\r\n                  alt={ride.name}\r\n                  title={ride.name}\r\n                  className=\"responsive-img \"\r\n                ></img></a>\r\n                <span className=\"card-title\"><a href={ride.disney_wiki_link} target=\"_new\">{ride.name}</a></span>\r\n              </div>\r\n              <div className=\"card-content\">\r\n               Park: {ride.location}<br />\r\n               Date Opened: {ride.date_opened}<br />\r\n               Date Closed: {ride.date_closed}\r\n              </div>\r\n            </div>\r\n          </div>\r\n         </div> \r\n            ))}\r\n      </div>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default AboutRides;\r\n","import React from \"react\";\nimport { HashRouter  as Router, Route, Switch } from \"react-router-dom\";\nimport Navbar from \"./components/navbar\";\nimport Footer from \"./components/footer\";\nimport RidesGame from \"./components/ridesGame\";\nimport AboutRides from \"./AboutRides\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router basename=\"/\">\n      <div>\n        <Navbar />\n        <Switch>\n        <Route exact path=\"/\" component={RidesGame} />\n        <Route path=\"/AboutRides\" component={AboutRides} />\n        </Switch>\n      </div>\n\n      <footer>\n        <Footer />\n      </footer>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}